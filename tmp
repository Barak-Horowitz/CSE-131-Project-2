READING IN IR PROGRAM
SUCCESSFULLY READ IR PROGRAM
CONVERTING IR PROGRAM TO MIPS
CONVERTING INSTRUCTIONS



 CONVERTING A HEADER 






 LOADING VALUE INTO STACK 






 LOADING VALUE INTO STACK 






 LOADING VALUE INTO STACK 



DUPLICATE VARIABLE SPOTTED
DUPLICATE VARIABLE SPOTTED
DUPLICATE VARIABLE SPOTTED
STACK CONTENTS AFTER ENTERING FUNCTION quicksort
VARIABLE A STORED AT OFFSET 4
VARIABLE hi STORED AT OFFSET 8
VARIABLE lo STORED AT OFFSET 12
VARIABLE ti STORED AT OFFSET 16
VARIABLE tj STORED AT OFFSET 20
VARIABLE j1 STORED AT OFFSET 24
VARIABLE x STORED AT OFFSET 28
VARIABLE mid STORED AT OFFSET 32
VARIABLE pivot STORED AT OFFSET 36
VARIABLE i STORED AT OFFSET 40
VARIABLE j STORED AT OFFSET 44
CONVERTING IR INSTRUCTION
assign i 0
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = 0
OPERAND 0 IS A NUMBER
MOVING VARIABLE i to stack
ITS OFFSET = 40
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $s0, $0, 0
addi $at, $sp, -40
sw $s0, ($at)
CONVERTING IR INSTRUCTION
assign j 0
CONVERTING IMMEDIATE
operand 0 = j
operand 1 = 0
OPERAND 0 IS A NUMBER
MOVING VARIABLE j to stack
ITS OFFSET = 44
ATTEMPTING TO PLACE VARIABLE j ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $s0, $0, 0
addi $at, $sp, -44
sw $s0, ($at)
CONVERTING IR INSTRUCTION
brgeq end lo hi
CONVERTING JUMP
LOADING VARIABLE lo INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE hi INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -8
lw $s2, ($at)
sub $at, $s1, $s2
bge $at, $0, quicksortend
CONVERTING IR INSTRUCTION
add mid lo hi
CONVERTING R TYPE
LOADING VARIABLE lo INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE hi INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE mid ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -8
lw $s2, ($at)
add $s0, $s1, $s2
addi $at, $sp, -32
sw $s0, ($at)
CONVERTING IR INSTRUCTION
div mid mid 2
CONVERTING IMMEDIATE
operand 0 = mid
operand 1 = mid
OPERAND midIS A VARIABLE
LOADING VARIABLE mid INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 2 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE mid ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -32
lw $s1, ($at)
addi $s0, $0, 2
div $s0, $s1, $s0
addi $at, $sp, -32
sw $s0, ($at)
CONVERTING IR INSTRUCTION
array_load pivot A mid
CONVERTING DATA OP
LOADING VARIABLE pivot INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE mid INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE pivot ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -36
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -32
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -36
sw $s0, ($at)
CONVERTING IR INSTRUCTION
sub i lo 1
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = lo
OPERAND loIS A VARIABLE
LOADING VARIABLE lo INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -40
sw $s0, ($at)
CONVERTING IR INSTRUCTION
add j hi 1
CONVERTING IMMEDIATE
operand 0 = j
operand 1 = hi
OPERAND hiIS A VARIABLE
LOADING VARIABLE hi INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE j ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -8
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -44
sw $s0, ($at)
CONVERTING IR INSTRUCTION
label loop0
CONVERTING JUMP
GLOBAL LABEL = quicksortloop0
CONVERTED TO MIPS INSTRUCTIONS
quicksortloop0: add $0, $0, $0
CONVERTING IR INSTRUCTION
label loop1
CONVERTING JUMP
GLOBAL LABEL = quicksortloop1
CONVERTED TO MIPS INSTRUCTIONS
quicksortloop1: add $0, $0, $0
CONVERTING IR INSTRUCTION
add i i 1
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = i
OPERAND iIS A VARIABLE
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -40
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -40
sw $s0, ($at)
CONVERTING IR INSTRUCTION
array_load x A i
CONVERTING DATA OP
LOADING VARIABLE x INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE x ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -28
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -40
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -28
sw $s0, ($at)
CONVERTING IR INSTRUCTION
assign ti x
CONVERTING R TYPE
LOADING VARIABLE x INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE ti ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -28
lw $s1, ($at)
move $s0, $s1
addi $at, $sp, -16
sw $s0, ($at)
CONVERTING IR INSTRUCTION
brlt loop1 ti pivot
CONVERTING JUMP
LOADING VARIABLE ti INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE pivot INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -16
lw $s1, ($at)
addi $at, $sp, -36
lw $s2, ($at)
sub $at, $s1, $s2
blt $at, $0, quicksortloop1
CONVERTING IR INSTRUCTION
label loop2
CONVERTING JUMP
GLOBAL LABEL = quicksortloop2
CONVERTED TO MIPS INSTRUCTIONS
quicksortloop2: add $0, $0, $0
CONVERTING IR INSTRUCTION
sub j j 1
CONVERTING IMMEDIATE
operand 0 = j
operand 1 = j
OPERAND jIS A VARIABLE
LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE j ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -44
sw $s0, ($at)
CONVERTING IR INSTRUCTION
array_load x A j
CONVERTING DATA OP
LOADING VARIABLE x INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE x ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -28
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -28
sw $s0, ($at)
CONVERTING IR INSTRUCTION
assign tj x
CONVERTING R TYPE
LOADING VARIABLE x INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE tj ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -28
lw $s1, ($at)
move $s0, $s1
addi $at, $sp, -20
sw $s0, ($at)
CONVERTING IR INSTRUCTION
brgt loop2 tj pivot
CONVERTING JUMP
LOADING VARIABLE tj INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE pivot INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -20
lw $s1, ($at)
addi $at, $sp, -36
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, quicksortloop2
CONVERTING IR INSTRUCTION
brgeq exit0 i j
CONVERTING JUMP
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -40
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
sub $at, $s1, $s2
bge $at, $0, quicksortexit0
CONVERTING IR INSTRUCTION
array_store ti A j
CONVERTING DATA OP
LOADING VARIABLE ti INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE ti ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -16
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -16
sw $s0, ($at)
CONVERTING IR INSTRUCTION
array_store tj A i
CONVERTING DATA OP
LOADING VARIABLE tj INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE tj ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -20
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -40
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -20
sw $s0, ($at)
CONVERTING IR INSTRUCTION
goto loop0
CONVERTING JUMP
CONVERTED TO MIPS INSTRUCTIONS
j quicksortloop0
CONVERTING IR INSTRUCTION
label exit0
CONVERTING JUMP
GLOBAL LABEL = quicksortexit0
CONVERTED TO MIPS INSTRUCTIONS
quicksortexit0: add $0, $0, $0
CONVERTING IR INSTRUCTION
add j1 j 1
CONVERTING IMMEDIATE
operand 0 = j1
operand 1 = j
OPERAND jIS A VARIABLE
LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE j1 ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -24
sw $s0, ($at)
CONVERTING IR INSTRUCTION
call quicksort A lo j
CONVERTING JUMP
CONVERTING A CALL INSTRUCTION
CHECKING IF OPERAND A IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CHECKING IF OPERAND lo IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE lo INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CHECKING IF OPERAND j IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $at, $sp, -12
lw $s1, ($at)
move $a1, $s1
addi $at, $sp, -44
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -48
jal quicksort
addi $sp, $sp, 48
CONVERTING IR INSTRUCTION
add j j 1
CONVERTING IMMEDIATE
operand 0 = j
operand 1 = j
OPERAND jIS A VARIABLE
LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE j ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -44
sw $s0, ($at)
CONVERTING IR INSTRUCTION
call quicksort A j hi
CONVERTING JUMP
CONVERTING A CALL INSTRUCTION
CHECKING IF OPERAND A IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CHECKING IF OPERAND j IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE j INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CHECKING IF OPERAND hi IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE hi INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $at, $sp, -44
lw $s1, ($at)
move $a1, $s1
addi $at, $sp, -8
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -48
jal quicksort
addi $sp, $sp, 48
CONVERTING IR INSTRUCTION
label end
CONVERTING JUMP
GLOBAL LABEL = quicksortend
CONVERTED TO MIPS INSTRUCTIONS
quicksortend: add $0, $0, $0



 CONVERTING A HEADER 






 LOADING VALUE INTO STACK 



STACK CONTENTS AFTER ENTERING FUNCTION main
VARIABLE A STORED AT OFFSET 4
VARIABLE t STORED AT OFFSET 8
VARIABLE i STORED AT OFFSET 12
VARIABLE n STORED AT OFFSET 16
CONVERTING IR INSTRUCTION
assign t 0
CONVERTING IMMEDIATE
operand 0 = t
operand 1 = 0
OPERAND 0 IS A NUMBER
MOVING VARIABLE t to stack
ITS OFFSET = 8
ATTEMPTING TO PLACE VARIABLE t ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $s0, $0, 0
addi $at, $sp, -8
sw $s0, ($at)
CONVERTING IR INSTRUCTION
callr n geti
CONVERTING IR FUNCTION CALL
CONVERTING AN IR FUNCTION CALL
LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE n ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -16
lw $s0, ($at)
addi $v0, $0, 5
syscall
move $s0, $v0
addi $at, $sp, -16
sw $s0, ($at)
CONVERTING IR INSTRUCTION
brgt return n 100
CONVERTING JUMP
LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -16
lw $s1, ($at)
addi $at, $s1, -100
bgt $at, $0, mainreturn
CONVERTING IR INSTRUCTION
sub n n 1
CONVERTING IMMEDIATE
operand 0 = n
operand 1 = n
OPERAND nIS A VARIABLE
LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE n ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -16
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -16
sw $s0, ($at)
CONVERTING IR INSTRUCTION
assign i 0
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = 0
OPERAND 0 IS A NUMBER
MOVING VARIABLE i to stack
ITS OFFSET = 12
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $s0, $0, 0
addi $at, $sp, -12
sw $s0, ($at)
CONVERTING IR INSTRUCTION
label loop0
CONVERTING JUMP
GLOBAL LABEL = mainloop0
CONVERTED TO MIPS INSTRUCTIONS
mainloop0: add $0, $0, $0
CONVERTING IR INSTRUCTION
brgt exit0 i n
CONVERTING JUMP
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -16
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, mainexit0
CONVERTING IR INSTRUCTION
callr t geti
CONVERTING IR FUNCTION CALL
CONVERTING AN IR FUNCTION CALL
LOADING VARIABLE t INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE t ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -8
lw $s0, ($at)
addi $v0, $0, 5
syscall
move $s0, $v0
addi $at, $sp, -8
sw $s0, ($at)
CONVERTING IR INSTRUCTION
array_store t A i
CONVERTING DATA OP
LOADING VARIABLE t INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE t ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -8
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -12
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -8
sw $s0, ($at)
CONVERTING IR INSTRUCTION
add i i 1
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = i
OPERAND iIS A VARIABLE
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -12
sw $s0, ($at)
CONVERTING IR INSTRUCTION
goto loop0
CONVERTING JUMP
CONVERTED TO MIPS INSTRUCTIONS
j mainloop0
CONVERTING IR INSTRUCTION
label exit0
CONVERTING JUMP
GLOBAL LABEL = mainexit0
CONVERTED TO MIPS INSTRUCTIONS
mainexit0: add $0, $0, $0
CONVERTING IR INSTRUCTION
call quicksort A 0 n
CONVERTING JUMP
CONVERTING A CALL INSTRUCTION
CHECKING IF OPERAND A IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CHECKING IF OPERAND 0 IS AN IMMEDIATE OR A VARIABLE
CHECKING IF OPERAND n IS AN IMMEDIATE OR A VARIABLE
LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $a1, $0, 0
addi $at, $sp, -16
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -20
jal quicksort
addi $sp, $sp, 20
CONVERTING IR INSTRUCTION
assign i 0
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = 0
OPERAND 0 IS A NUMBER
MOVING VARIABLE i to stack
ITS OFFSET = 12
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $s0, $0, 0
addi $at, $sp, -12
sw $s0, ($at)
CONVERTING IR INSTRUCTION
label loop1
CONVERTING JUMP
GLOBAL LABEL = mainloop1
CONVERTED TO MIPS INSTRUCTIONS
mainloop1: add $0, $0, $0
CONVERTING IR INSTRUCTION
brgt exit1 i n
CONVERTING JUMP
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE n INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -16
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, mainexit1
CONVERTING IR INSTRUCTION
array_load t A i
CONVERTING DATA OP
LOADING VARIABLE t INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE A INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



ATTEMPTING TO PLACE VARIABLE t ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -8
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -12
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -8
sw $s0, ($at)
CONVERTING IR INSTRUCTION
call puti t
CONVERTING IR FUNCTION CALL
CONVERTING AN IR FUNCTION CALL
LOADING VARIABLE t INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -8
lw $s1, ($at)
addi $v0, $0, 1
move $a0, $s1
syscall
CONVERTING IR INSTRUCTION
call putc 10
CONVERTING IR FUNCTION CALL
CONVERTING AN IR FUNCTION CALL
CONVERTED TO MIPS INSTRUCTIONS
addi $v0, $0, 11
addi $a0, $0, 10
syscall
CONVERTING IR INSTRUCTION
add i i 1
CONVERTING IMMEDIATE
operand 0 = i
operand 1 = i
OPERAND iIS A VARIABLE
LOADING VARIABLE i INTO A REGISTER



 LOADING VALUE INTO A REGISTER 



OPERAND 1 IS A NUMBER
ATTEMPTING TO PLACE VARIABLE i ONTO STACK



 LOADING VALUE INTO STACK 



CONVERTED TO MIPS INSTRUCTIONS
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -12
sw $s0, ($at)
CONVERTING IR INSTRUCTION
goto loop1
CONVERTING JUMP
CONVERTED TO MIPS INSTRUCTIONS
j mainloop1
CONVERTING IR INSTRUCTION
label exit1
CONVERTING JUMP
GLOBAL LABEL = mainexit1
CONVERTED TO MIPS INSTRUCTIONS
mainexit1: add $0, $0, $0
CONVERTING IR INSTRUCTION
label return
CONVERTING JUMP
GLOBAL LABEL = mainreturn
CONVERTED TO MIPS INSTRUCTIONS
mainreturn: add $0, $0, $0
CONVERTED INSTRUCTIONS
PRINTING INSTRUCTIONS
quicksort: add $0, $0, $0
addi $at, $sp, 0
sw $ra, ($at)
addi $at, $sp, -4
sw $a0, ($at)
addi $at, $sp, -12
sw $a1, ($at)
addi $at, $sp, -8
sw $a2, ($at)
addi $s0, $0, 0
addi $at, $sp, -40
sw $s0, ($at)
addi $s0, $0, 0
addi $at, $sp, -44
sw $s0, ($at)
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -8
lw $s2, ($at)
sub $at, $s1, $s2
bge $at, $0, quicksortend
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -8
lw $s2, ($at)
add $s0, $s1, $s2
addi $at, $sp, -32
sw $s0, ($at)
addi $at, $sp, -32
lw $s1, ($at)
addi $s0, $0, 2
div $s0, $s1, $s0
addi $at, $sp, -32
sw $s0, ($at)
addi $at, $sp, -36
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -32
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -36
sw $s0, ($at)
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -40
sw $s0, ($at)
addi $at, $sp, -8
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -44
sw $s0, ($at)
quicksortloop0: add $0, $0, $0
quicksortloop1: add $0, $0, $0
addi $at, $sp, -40
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -40
sw $s0, ($at)
addi $at, $sp, -28
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -40
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -28
sw $s0, ($at)
addi $at, $sp, -28
lw $s1, ($at)
move $s0, $s1
addi $at, $sp, -16
sw $s0, ($at)
addi $at, $sp, -16
lw $s1, ($at)
addi $at, $sp, -36
lw $s2, ($at)
sub $at, $s1, $s2
blt $at, $0, quicksortloop1
quicksortloop2: add $0, $0, $0
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -44
sw $s0, ($at)
addi $at, $sp, -28
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -28
sw $s0, ($at)
addi $at, $sp, -28
lw $s1, ($at)
move $s0, $s1
addi $at, $sp, -20
sw $s0, ($at)
addi $at, $sp, -20
lw $s1, ($at)
addi $at, $sp, -36
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, quicksortloop2
addi $at, $sp, -40
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
sub $at, $s1, $s2
bge $at, $0, quicksortexit0
addi $at, $sp, -16
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -44
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -16
sw $s0, ($at)
addi $at, $sp, -20
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -40
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -20
sw $s0, ($at)
j quicksortloop0
quicksortexit0: add $0, $0, $0
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -24
sw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $at, $sp, -12
lw $s1, ($at)
move $a1, $s1
addi $at, $sp, -44
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -48
jal quicksort
addi $sp, $sp, 48
addi $at, $sp, -44
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -44
sw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $at, $sp, -44
lw $s1, ($at)
move $a1, $s1
addi $at, $sp, -8
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -48
jal quicksort
addi $sp, $sp, 48
quicksortend: add $0, $0, $0
addi $at, $sp, 0
lw $ra, ($at)
jr $ra
main: add $0, $0, $0
addi $at, $sp, 0
sw $ra, ($at)
addi $v0, $0, 9
addi $a0, $0, 400
syscall
move $s1, $v0
addi $at, $sp, -4
sw $s1, ($at)
addi $s0, $0, 0
addi $at, $sp, -8
sw $s0, ($at)
addi $at, $sp, -16
lw $s0, ($at)
addi $v0, $0, 5
syscall
move $s0, $v0
addi $at, $sp, -16
sw $s0, ($at)
addi $at, $sp, -16
lw $s1, ($at)
addi $at, $s1, -100
bgt $at, $0, mainreturn
addi $at, $sp, -16
lw $s1, ($at)
addi $s0, $s1, -1
addi $at, $sp, -16
sw $s0, ($at)
addi $s0, $0, 0
addi $at, $sp, -12
sw $s0, ($at)
mainloop0: add $0, $0, $0
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -16
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, mainexit0
addi $at, $sp, -8
lw $s0, ($at)
addi $v0, $0, 5
syscall
move $s0, $v0
addi $at, $sp, -8
sw $s0, ($at)
addi $at, $sp, -8
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -12
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
sw $s0, ($at)
addi $at, $sp, -8
sw $s0, ($at)
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -12
sw $s0, ($at)
j mainloop0
mainexit0: add $0, $0, $0
addi $at, $sp, -4
lw $s1, ($at)
move $a0, $s1
addi $a1, $0, 0
addi $at, $sp, -16
lw $s1, ($at)
move $a2, $s1
addi $sp, $sp, -20
jal quicksort
addi $sp, $sp, 20
addi $s0, $0, 0
addi $at, $sp, -12
sw $s0, ($at)
mainloop1: add $0, $0, $0
addi $at, $sp, -12
lw $s1, ($at)
addi $at, $sp, -16
lw $s2, ($at)
sub $at, $s1, $s2
bgt $at, $0, mainexit1
addi $at, $sp, -8
lw $s0, ($at)
addi $at, $sp, -4
lw $s1, ($at)
addi $at, $sp, -12
lw $s2, ($at)
move $at, $s2
sll $at, $at, 2
add $at, $at, $s1
lw $s0, ($at)
addi $at, $sp, -8
sw $s0, ($at)
addi $at, $sp, -8
lw $s1, ($at)
addi $v0, $0, 1
move $a0, $s1
syscall
addi $v0, $0, 11
addi $a0, $0, 10
syscall
addi $at, $sp, -12
lw $s1, ($at)
addi $s0, $s1, 1
addi $at, $sp, -12
sw $s0, ($at)
j mainloop1
mainexit1: add $0, $0, $0
mainreturn: add $0, $0, $0
addi $v0, $0, 10
syscall
PRINTED ALL INSTRUCTIONS
SUCCESSFULLY CONVERTED IR PROGRAM TO MIPS
